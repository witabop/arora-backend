version: 0.2

phases:
  install:
    runtime-versions:
      golang: 1.23.5
    commands:
    # - runtime-v
    # - yum update -y
    - yum install -y zip
    # - yum update -y
    # - yum install -y zip tar gzip # Required for Go installation
    # # Install Go 1.23.5
    # - curl -OL https://go.dev/dl/go1.23.5.linux-arm64.tar.gz # ARM64 (Graviton)
    # # For x86_64: curl -OL https://go.dev/dl/go1.23.5.linux-amd64.tar.gz
    # - tar -C /usr/local -xzf go1.23.5.linux-arm64.tar.gz
    # - export PATH=$PATH:/usr/local/go/bin
    # - go version # Verify installation
  build:
    commands:
    - cd lambdas # we need to be in the lambdas directory
    - | # we just use this to allow multiline command formatting for easier readability
      for dir in */ ; do
        dirname=${dir%/};
        cd "$dirname";
        GOOS=linux GOARCH=amd64 go build -mod=readonly -o bootstrap main.go || { echo "Bootstrap failed"; exit 1; };
        if [ ! -f "bootstrap" ]; then
          echo "Error: bootstrap not created in $dirname";
          exit 1;
        fi
        chmod +x bootstrap;
        zip -j "../${dirname}.zip" bootstrap;
        cd ..
        aws lambda update-function-code \
          --function-name "arora-search-${dirname}" \
          --zip-file "fileb://${dirname}.zip" \
          --publish;
      done
    # the previous code does the following:
    # 1. loop through the directories in the lambdas directory
    # 2. set the directory name to the name of the current directory
    # 3. cd into the directory we are working with
    # 4. build the go binary as "bootstrap" (needed for lambda execution) (if this fails then exit)
    # 5. check if the bootstrap file exists, if not then log and fail
    # 6. make the bootstrap executable
    # 7. zip the bootstrap file (this is what we send to the lambda function)
    # 8. cd out of the directory we just worked with
    # 9. deploy the new function code to lambda and publish it as a new version
